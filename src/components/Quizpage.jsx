import React from "react";
import { useNavigate, useLocation } from "react-router-dom";
import {
  Box,
  Typography,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  Paper,
} from "@mui/material";

import "./tailwind.css";

export default function Quizpage() {
  const navigate = useNavigate();
  const location = useLocation();
  const [quizObject, setQuizObject] = React.useState(JSON.parse(location.state.quiz));
  console.log(quizObject);

  // const { quiz } = location.state || {};
  // const quizObject = JSON.parse(quiz); // json from backend may be wrong, as the data is generated by groq, so this is for fixing data
  const [userAnswers, setUserAnswers] = React.useState(
    Array(quizObject.questions.length).fill(null)
  ); // Track user answers
  const [submitted, setSubmitted] = React.useState(false); // Track submission status

  // Handle answer selection
  const handleAnswerChange = (questionIndex, option) => {
    const newAnswers = [...userAnswers];
    newAnswers[questionIndex] = option; // Update selected answer for the question
    setUserAnswers(newAnswers);
  };

  // Handle quiz submission
  const handleSubmit = () => {
    setSubmitted(true); // Mark quiz as submitted
  };

  // Reset the quiz
  const handleReset = () => {
    setUserAnswers(Array(quizObject.questions.length).fill(null)); // Reset all answers
    setSubmitted(false); // Unsubmit the quiz
  };

  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      minHeight="100vh"
      p={2}
    >
      <Paper elevation={3} sx={{ padding: 4, maxWidth: 800, width: "100%" }}>
        <Box p={4}>
          <Typography variant="h4" gutterBottom>
            Quiz Session
          </Typography>

          {/* Render each question */}
          {quizObject.questions.map((question, questionIndex) => (
            <Box key={questionIndex} mb={4}>
              <Typography variant="h6">
                {questionIndex + 1}. {question.question}
              </Typography>

              <FormControl component="fieldset">
                <RadioGroup
                  value={
                    userAnswers[questionIndex] !== null
                      ? userAnswers[questionIndex]
                      : ""
                  }
                  onChange={(e) =>
                    handleAnswerChange(questionIndex, e.target.value)
                  }
                >
                  {question.options.map((option, optionIndex) => (
                    <FormControlLabel
                      key={optionIndex}
                      value={option}
                      control={<Radio />}
                      label={option}
                      disabled={submitted} // Disable options after submission
                    />
                  ))}
                </RadioGroup>
              </FormControl>

              {/* Display correct answer and feedback after submission */}
              {submitted && (
                <Typography
                  variant="body1"
                  color={
                    userAnswers[questionIndex] === question.correct
                      ? "green"
                      : "red"
                  }
                >
                  {userAnswers[questionIndex] === question.correct
                    ? "Correct!"
                    : `Incorrect. The correct answer is: ${question.correct}`}
                </Typography>
              )}
            </Box>
          ))}

          <Box
            display="flex"
            flexDirection="row"
            alignItems="center"
            gap={2}
          ></Box>
          {/* Submit or Reset Buttons */}
          {!submitted ? (
            <button
              onClick={handleSubmit}
              disabled={userAnswers.includes(null)}
              className="button-color-2"
            >
              Submit
            </button>
          ) : (
            <button onClick={handleReset} className="button-color-2">
              Reset Quiz
            </button>
          )}

          <button
            className="button-color-1"
            onClick={() => {
              navigate("/");
            }}
          >
            Upload new slides!
          </button>
        </Box>
      </Paper>
    </Box>
  );
}
